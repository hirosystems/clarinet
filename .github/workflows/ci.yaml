name: CI
on:
  pull_request:
  push:
    tags:
      - "v*"
    paths-ignore:
      - "**/CHANGELOG.md"
      - "**/package.json"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  pre_run:
    name: Cancel previous runs
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@ad6cb1b847ffb509a69b745b6ee2f1d14dfe14b8
        with:
          access_token: ${{ github.token }}

  audit:
    name: Audit and format
    runs-on: ubuntu-latest
    needs: pre_run
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
          override: true

      - name: Set Cargo file permissions
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: ~/.cargo/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: cargo install cargo-audit

      - name: Run audit
        run: cargo audit --ignore RUSTSEC-2021-0076

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: pre_run
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: llvm-tools-preview
          override: true

      - name: Cache cargo
        uses: actions/cache@v2
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: cargo install grcov

      - name: Unit Tests
        env:
          RUSTFLAGS: "-Zinstrument-coverage"
          LLVM_PROFILE_FILE: "clarinet-%p-%m.profraw"
        run: cargo build && cargo test

      - name: Generate coverage
        run: grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info

      - name: Functional Tests
        run: |
          for testdir in $(ls examples); do
            ./target/debug/clarinet test --manifest-path examples/${testdir}/Clarinet.toml
          done

      - name: Upload coverage report
        uses: codecov/codecov-action@v1
        with:
          flags: unittests
          name: clarinet
          verbose: true

  dist:
    name: Build distributions
    runs-on: ${{ matrix.os }}
    needs: pre_run
    # Related upstream issue:
    # https://github.com/nagisa/rust_libloading/issues/61#issuecomment-607941377
    #
    # env:
    #  CC: deny_c

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
            target: x86_64-unknown-linux-gnu
            linker_package:
            cc: ""
          # To be uncommented later when adding new distros
          # - os: ubuntu-latest
          #   platform: linux-arm64
          #   target: aarch64-unknown-linux-gnu
          #   linker_package: gcc-aarch64-linux-gnu
          #   cc: aarch64-linux-gnu-gcc
          # - os: ubuntu-latest
          #   platform: linux-armv7
          #   target: armv7-unknown-linux-gnueabihf
          #   linker_package: gcc-arm-linux-gnueabihf
          #   cc: arm-linux-gnueabihf-gcc
          # - os: ubuntu-latest
          #   platform: linux-musl-x64
          #   target: x86_64-unknown-linux-musl
          #   linker_package:
          #   cc: musl-gcc
          - os: windows-latest
            platform: windows-x64
            target: x86_64-pc-windows-msvc
            linker_package:
            cc: ""
          - os: macos-latest
            platform: macos-x64
            target: x86_64-apple-darwin
            linker_package:
            cc: ""
          # - os: macos-latest
          #   platform: macos-aarch64-m1
          #   target: aarch64-apple-darwin
          #   linker_package:
          #   cc: ""

    steps:
      - name: Configure git to use LF (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Install wix (Windows)
        if: matrix.os == 'windows-latest'
        run: cargo install cargo-wix

      - if: matrix.os != 'windows-latest'
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/${{ matrix.target }}/release/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # To be uncommented later when adding new distros
      # - name: Install ${{ matrix.platform }} linker
      #   if: matrix.platform == 'linux-arm64' || matrix.platform == 'linux-armv7' || matrix.platform == 'linux-musl-x64'
      #   run: sudo apt-get update && sudo apt-get install -y ${{ matrix.linker_package }}

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.target }}
        # To be uncommented later when adding new distros
        # env:
        #   CC: ${{ matrix.cc }}
        #   CC_aarch64_unknown_linux_gnu: ${{ matrix.cc }}
        #   CC_armv7_unknown_linux_gnueabihf: ${{ matrix.cc }}
        #   CC_x86_64_unknown_linux_musl: ${{ matrix.cc }}
        #   CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.cc }}
        #   CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: ${{ matrix.cc }}
        #   CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: ${{ matrix.cc }}

      - name: Code sign bin (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $certificate_file_name = "${env:TEMP}\certificate.pfx"

          $bytes_cert = [Convert]::FromBase64String('${{ secrets.WINDOWS_CODE_SIGNING_CERTIFICATE }}')
          [IO.File]::WriteAllBytes(${certificate_file_name}, ${bytes_cert})

          $signtool_path = ((Resolve-Path -Path "${env:ProgramFiles(x86)}/Windows Kits/10/bin/10*/x86").Path[-1]) + "/signtool.exe"
          $bin_path = (Resolve-Path -Path "target/${{ matrix.target }}/release/*.exe").Path
          & ${signtool_path} sign `
            /d "Clarinet is a clarity runtime packaged as a command line tool, designed to facilitate smart contract understanding, development, testing and deployment." `
            /du "https://github.com/hirosystems/clarinet" `
            /tr http://timestamp.digicert.com `
            /td sha256 `
            /fd sha256 `
            -f "${certificate_file_name}" `
            -p "${{ secrets.WINDOWS_CODE_SIGNING_PASSWORD }}" `
            "${bin_path}"

      - name: Build Installer (Windows)
        if: matrix.os == 'windows-latest'
        run: cargo wix -v --no-build --nocapture

      - name: Code sign installer (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $certificate_file_name = "${env:TEMP}\certificate.pfx"

          $bytes_cert = [Convert]::FromBase64String('${{ secrets.WINDOWS_CODE_SIGNING_CERTIFICATE }}')
          [IO.File]::WriteAllBytes(${certificate_file_name}, ${bytes_cert})

          $signtool_path = ((Resolve-Path -Path "${env:ProgramFiles(x86)}/Windows Kits/10/bin/10*/x86").Path[-1]) + "/signtool.exe"
          $msi_path = (Resolve-Path -Path "target/wix/*.msi").Path
          & ${signtool_path} sign `
            /d "Clarinet is a clarity runtime packaged as a command line tool, designed to facilitate smart contract understanding, development, testing and deployment." `
            /du "https://github.com/hirosystems/clarinet" `
            /tr http://timestamp.digicert.com `
            /td sha256 `
            /fd sha256 `
            -f "${certificate_file_name}" `
            -p "${{ secrets.WINDOWS_CODE_SIGNING_PASSWORD }}" `
            "${msi_path}"

      # Don't compress for Windows because winget can't yet unzip files
      - name: Compress artifact (Not Windows)
        if: matrix.os != 'windows-latest'
        run: zip --junk-paths clarinet-${{ matrix.platform }} ./target/${{ matrix.target }}/release/clarinet

      - name: Rename artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: mv target/wix/*.msi clarinet-${{ matrix.platform }}.msi

      # Separate uploads to prevent paths from being preserved
      - name: Upload artifact (Not Windows)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: clarinet-${{ matrix.platform }}
          path: clarinet-${{ matrix.platform }}.zip

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: clarinet-${{ matrix.platform }}
          path: clarinet-${{ matrix.platform }}.msi

      - name: Unit Tests
        run: cargo test --release --locked --target ${{ matrix.target }}

      - name: Functional Tests (Not Windows)
        if: matrix.os != 'windows-latest'
        run: |
          for testdir in $(ls examples); do
            ./target/${{ matrix.target }}/release/clarinet test --manifest-path examples/${testdir}/Clarinet.toml
          done

      - name: Functional Tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          foreach($testdir in Get-ChildItem examples) {
            ./target/${{ matrix.target }}/release/clarinet test --manifest-path ${testdir}/Clarinet.toml
          }

      - name: Upload Artifacts to GH release (Not Windows)
        uses: svenstaro/upload-release-action@v2
        if: startsWith(github.ref, 'refs/tags/v') && matrix.os != 'windows-latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: clarinet-${{ matrix.platform }}.zip
          tag: ${{ github.ref }}

      - name: Upload Artifacts to GH release (Windows)
        uses: svenstaro/upload-release-action@v2
        if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'windows-latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: clarinet-${{ matrix.platform }}.msi
          tag: ${{ github.ref }}

      # Cleans the `./target` dir after the build such that only dependencies are cached on CI
      - name: Prepare cache
        run: cargo xtask pre-cache

  build:
    name: Docker build
    runs-on: ubuntu-latest
    needs: pre_run
    outputs:
      version: ${{ steps.docker_meta.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build/Tag/Push Image
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs:
      - audit
      - dist
      - test
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Necessary for Semantic Release
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.event.repository.name }}
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/exec
            @semantic-release/git
