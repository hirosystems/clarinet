#compdef clarinet

autoload -U is-at-least

_clarinet() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
":: :_clarinet_commands" \
"*::: :->clarinet" \
&& ret=0
    case $state in
    (clarinet)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:clarinet-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
'--disable-telemetry[Do not provide developer usage telemetry for this project]' \
':name -- Project'\''s name:' \
&& ret=0
;;
(contract)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
":: :_contract_commands" \
"*::: :->contract" \
&& ret=0

    case $state in
    (contract)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:contract-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
'--manifest-path=[Path to Clarinet.toml]:MANIFEST_PATH: ' \
'--help[Print help information]' \
'--version[Print version information]' \
':name -- Contract'\''s name:' \
&& ret=0
;;
(requirement)
_arguments "${_arguments_options[@]}" \
'--manifest-path=[Path to Clarinet.toml]:MANIFEST_PATH: ' \
'--help[Print help information]' \
'--version[Print version information]' \
':contract-id -- Contract id (ex. " SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait"):' \
&& ret=0
;;
(fork)
_arguments "${_arguments_options[@]}" \
'--manifest-path=[Path to Clarinet.toml]:MANIFEST_PATH: ' \
'--help[Print help information]' \
'--version[Print version information]' \
':contract-id -- Contract id (ex. " SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait"):' \
&& ret=0
;;
        esac
    ;;
esac
;;
(console)
_arguments "${_arguments_options[@]}" \
'--manifest-path=[Path to Clarinet.toml]:MANIFEST_PATH: ' \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" \
'--manifest-path=[Path to Clarinet.toml]:MANIFEST_PATH: ' \
'--help[Print help information]' \
'--version[Print version information]' \
'--coverage[Generate coverage file (coverage.lcov)]' \
'--costs[Generate costs report]' \
'--watch[Relaunch tests upon updates to contracts]' \
'*::files -- Test files to be included (defaults to all tests found under tests/):' \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" \
'--manifest-path=[Path to Clarinet.toml]:MANIFEST_PATH: ' \
'--help[Print help information]' \
'--version[Print version information]' \
'::file -- If specified, check this file:' \
&& ret=0
;;
(publish)
_arguments "${_arguments_options[@]}" \
'--manifest-path=[Path to Clarinet.toml]:MANIFEST_PATH: ' \
'--help[Print help information]' \
'--version[Print version information]' \
'(--testnet --mainnet)--devnet[Deploy contracts on devnet, using settings/Devnet.toml]' \
'(--devnet --mainnet)--testnet[Deploy contracts on testnet, using settings/Testnet.toml]' \
'(--testnet --devnet)--mainnet[Deploy contracts on mainnet, using settings/Mainnet.toml]' \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" \
'--manifest-path=[Path to Clarinet.toml]:MANIFEST_PATH: ' \
'--help[Print help information]' \
'--version[Print version information]' \
'--allow-wallets[Allow access to wallets]' \
'--allow-write[Allow write access to disk]' \
'--allow-read[Allow read access to disk]' \
':script -- Script to run:' \
&& ret=0
;;
(integrate)
_arguments "${_arguments_options[@]}" \
'--manifest-path=[Path to Clarinet.toml]:MANIFEST_PATH: ' \
'--help[Print help information]' \
'--version[Print version information]' \
'--no-dashboard[Display streams of logs instead of terminal UI dashboard]' \
&& ret=0
;;
(lsp)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
':shell -- Specify which shell to generation completions script for:(bash elvish fish powershell zsh)' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_clarinet_commands] )) ||
_clarinet_commands() {
    local commands; commands=(
'new:Create and scaffold a new project' \
'contract:Subcommands for working with contracts' \
'console:Load contracts in a REPL for an interactive session' \
'test:Execute test suite' \
'check:Check syntax of your contracts' \
'publish:Publish contracts on chain' \
'run:Execute Clarinet extension' \
'integrate:Start devnet environment for integration testing' \
'lsp:Start an LSP server (for integration with editors)' \
'completions:Generate shell completions scripts' \
    )
    _describe -t commands 'clarinet commands' commands "$@"
}
(( $+functions[_check_commands] )) ||
_check_commands() {
    local commands; commands=()
    _describe -t commands 'check commands' commands "$@"
}
(( $+functions[_completions_commands] )) ||
_completions_commands() {
    local commands; commands=()
    _describe -t commands 'completions commands' commands "$@"
}
(( $+functions[_console_commands] )) ||
_console_commands() {
    local commands; commands=()
    _describe -t commands 'console commands' commands "$@"
}
(( $+functions[_contract_commands] )) ||
_contract_commands() {
    local commands; commands=(
'new:Generate files and settings for a new contract' \
'requirement:Add third-party requirements to this project' \
'fork:Replicate a third-party contract into this project' \
    )
    _describe -t commands 'contract commands' commands "$@"
}
(( $+functions[_fork_commands] )) ||
_fork_commands() {
    local commands; commands=()
    _describe -t commands 'fork commands' commands "$@"
}
(( $+functions[_integrate_commands] )) ||
_integrate_commands() {
    local commands; commands=()
    _describe -t commands 'integrate commands' commands "$@"
}
(( $+functions[_lsp_commands] )) ||
_lsp_commands() {
    local commands; commands=()
    _describe -t commands 'lsp commands' commands "$@"
}
(( $+functions[_new_commands] )) ||
_new_commands() {
    local commands; commands=()
    _describe -t commands 'new commands' commands "$@"
}
(( $+functions[_publish_commands] )) ||
_publish_commands() {
    local commands; commands=()
    _describe -t commands 'publish commands' commands "$@"
}
(( $+functions[_requirement_commands] )) ||
_requirement_commands() {
    local commands; commands=()
    _describe -t commands 'requirement commands' commands "$@"
}
(( $+functions[_run_commands] )) ||
_run_commands() {
    local commands; commands=()
    _describe -t commands 'run commands' commands "$@"
}
(( $+functions[_test_commands] )) ||
_test_commands() {
    local commands; commands=()
    _describe -t commands 'test commands' commands "$@"
}

_clarinet "$@"
